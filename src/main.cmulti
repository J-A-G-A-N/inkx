#include <ncurses.h>
#include <string.h>
#include "data/dynamic_array/dynamicarray.h"
#include "io/io.h"
#include <stdint.h>
#include <sys/types.h>
#include <pthread.h>
uint32_t curx = 0 , cury = 0 ;
Text* T ;
uint32_t *cx = &curx , *cy = &cury; 
int ch = 0 ; 
int running = 1 ;

typedef struct {
    char* filename;
    Text** text;
    uint32_t* cy;
    uint32_t* cx;
} LoadFileArgs;

void* load_file_thread(void* args) {
    LoadFileArgs* lf_args = (LoadFileArgs*)args;
    LoadFile(lf_args->filename, lf_args->text, lf_args->cy, lf_args->cx);
    pthread_exit(NULL);
}





int main(int argc ,char*argv[]) {
	Dynamic_array* DA = CreateDA(1);
	char flname[100];
    if (argc > 1){
        strcpy(flname,argv[1]);
     }
	clearfile();
    // Loading frame content
	 pthread_t load_thread;
    LoadFileArgs lf_args = {flname, &T, cy, cx};

    if (pthread_create(&load_thread, NULL, load_file_thread, &lf_args)) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }
	
	
	
	//T->gb->cursor_pos = 0;
    // Initializing the screen 
    initscr();
    cbreak();
    noecho();
    keypad(stdscr,TRUE);

    refresh();

    while(running) {
       RenderTextT(T);
       ch = getch();
       if (ListenKeys(ch, cy, cx, &T, DA,argv[1])==false){
            running = 0;
       }
       refresh();
    }

    endwin();
    DestroyText(T);
	DestroyDA(DA);
     return 0;
}

